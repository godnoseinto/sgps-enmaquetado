<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	<display-name>Archetype Created Web Application</display-name>

	<!-- Contiene la declaración de los parámetros de inicialización para el 
		contexto -->
	<context-param>
		<!-- Indica la ubicación del archivo de configuración del contexto -->
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:applicationContext.xml</param-value>
	</context-param>
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<filter>
		<filter-name>UrlRewriteFilter</filter-name>
		<filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
		<init-param>
			<param-name>logLevel</param-name>
			<param-value>WARN</param-value>
		</init-param>
	</filter>
	<!-- Permite cargar objetos que tienen definida la carga 'perezosa' de Hibernate 
		evitando con ello tener que abrir sesiones para cada objeto asociado -->
	<!-- <filter> <filter-name>openSessionInViewFilter</filter-name> <filter-class>org.springframework.orm.hibernate5.support.OpenSessionInViewFilter</filter-class> 
		<init-param> <param-name>flushMode</param-name> <param-value>ALWAYS</param-value> 
		</init-param> <init-param> <param-name>sessionFactoryBeanName</param-name> 
		<param-value>entityManager</param-value> </init-param> <init-param> <param-name>singleSession</param-name> 
		<param-value>false</param-value> </init-param> </filter> -->
	<filter>
		<filter-name>oemInViewFilter</filter-name>
		<filter-class>
			org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
		<init-param>
			<param-name>entityManagerFactoryBeanName</param-name>
			<param-value>entityManagerFactory</param-value>
		</init-param>
		<init-param>
			<param-name>singleSession</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>flushMode</param-name>
			<param-value>AUTO</param-value>
		</init-param>
	</filter>
	<!-- Filtro de Struts2 que prepara las peticiones que son recibidas -->
	<filter>
		<filter-name>struts-prepare</filter-name>
		<filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>
	</filter>
	<!-- Filtro que permite hacer uso de SiteMesh como decorador en el proyecto -->
	<filter>
		<filter-name>sitemesh</filter-name>
		<filter-class>com.opensymphony.sitemesh.webapp.SiteMeshFilter</filter-class>
	</filter>
	<!-- Filtro de struts2 que ejecuta la petición -->
	<filter>
		<filter-name>struts-execute</filter-name>
		<filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>
	</filter>
	<!-- Mapeo de filtros -->
	<!-- Se mapea el filtro para reescribir la url y esta es aplicada para cualquier 
		url que venga directamente del cliente -->
	<filter-mapping>
		<filter-name>UrlRewriteFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- Se mapea el filtro que permite abrir sesiones durante una petición 
		para obtener que no son cargados mediante el dao -->
	<!-- <filter-mapping> <filter-name>openSessionInViewFilter</filter-name> 
		<url-pattern>/*</url-pattern> </filter-mapping> -->
	<filter-mapping>
		<filter-name>oemInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- Se mapea el filtro para preparar la petición por parte de struts2 y 
		esta es aplicada para cualquier url que venga directamente del cliente -->
	<filter-mapping>
		<filter-name>struts-prepare</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
	<!-- Se mapea el filtro para aplicar el decorador a cualquier petición -->
	<filter-mapping>
		<filter-name>sitemesh</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
	<!-- Se mapea el filtro para ejecutar la petición por parte de struts2 y 
		esta es aplicada para cualquier url que venga directamente del cliente -->
	<filter-mapping>
		<filter-name>struts-execute</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
		<dispatcher>INCLUDE</dispatcher>
	</filter-mapping>
	<!-- Listeners -->
	<!-- Listener que crea el contexto necesario una vez que se ejecuta la aplicación 
		web, lee y parsea el context-param definido en este mismo archivo -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- Listener agregado dado el uso de sitemesh -->
	<listener>
		<listener-class>org.apache.struts2.dispatcher.listener.StrutsListener</listener-class>
	</listener>
</web-app>
